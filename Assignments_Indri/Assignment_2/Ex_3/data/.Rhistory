tau2 <- 2
y <- rnorm( n, theta_sample, sqrt(sigma2) )
# Launch Stan model.
data <- list( N = n, y = y, sigma = sqrt(sigma2), mu = mu, tau = sqrt(tau2) )
fit <- stan( file = "normal.stan", data = data, chains = 4, iter = 2000 )
# Extract Stan output.
sim <- extract(fit)
hist( sim$theta, breaks = 25, main = expression(paste('Random draws of ', theta)),
xlab = expression(theta), freq = FALSE )
den <- density( sim$theta, adj = 2 )
line <- lines( den, col = "blue", lwd = 2, lty = 1 )
quantiles <- quantile( sim$theta, probs = c(0.05, 0.95), na.rm = FALSE, names = TRUE )
# Get approximate function from the already computed density, useful to correcly plot quantiles.
dden <- approxfun(den$x, den$y)
# Plot segments on 0.05 and 0.95 quantiles.
segments( x0 = quantiles[1], y0 = 0, y1 = dden(quantiles[1]), col = "red", lty = 2, lwd = 2 )
segments( x0 = quantiles[2], y0 = 0, y1 = dden(quantiles[2]), col = "red", lty = 2, lwd = 2 )
#launch biparametric Stan model
data3<- list(N=n, y=y, a=-10, b=10)
fit3 <- stan(file="biparametric.stan", data = data3, chains = 4, iter=2000,
refresh=-1)
#extract stan output for biparametric model
sim3 <- extract(fit3)
posterior_biv <- as.matrix(fit3)
theta_est <- mean(sim3$theta)
sigma_est <- mean(sim3$sigma)
c(theta_est, sigma_est)
traceplot(fit3, pars=c("theta", "sigma"))
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior_biv,
pars = c("theta","sigma"),
prob = 0.8) + plot_title@
#launch biparametric Stan model
data3 <- list(N = n, y = y, a = -10, b = 10)
fit3 <- stan(file = "biparametric.stan", data = data3, chains = 4, ite r = 2000, refresh=-1)
#launch biparametric Stan model
data3 <- list(N = n, y = y, a = -10, b = 10)
fit3 <- stan(file = "biparametric.stan", data = data3, chains = 4, iter = 2000, refresh=-1)
#extract stan output for biparametric model
sim3 <- extract(fit3)
posterior_biv <- as.matrix(fit3)
theta_est <- mean(sim3$theta)
sigma_est <- mean(sim3$sigma)
c(theta_est, sigma_est)
traceplot(fit3, pars=c("theta", "sigma"))
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior_biv,
pars = c("theta","sigma"),
prob = 0.8) + plot_title
library(boot)
library(rstan)
library(ggplot2)
library(boot)
library(rstan)
library(ggplot2)
score_data <- read.table('student_score.txt', header = TRUE)
psi_fun <- function(data, indices) {
eig <- eigen(cor(data[indices,]))$values  # Goddamn the indices.
return(max(eig) / sum(eig))
}
# psi_fun(score_data)
strap <- boot(data = score_data, statistic = psi_fun, R = 1000); strap
plot(strap)
boot.ci(strap)
# Data.
y <- c(155.9, 200.2, 143.8, 150.1,152.1, 142.2, 147, 146, 146, 170.3, 148, 140, 118, 144, 97)
# log-likelihood function.
log_lik_weibull <- function(data, param) {
-sum(dweibull(data, shape = param[1], scale = param[2], log = TRUE))
}
# ML estimation.
weib.y.mle <- optim(c(1,1), fn = log_lik_weibull, hessian = T,
method = 'L-BFGS-B', lower = rep(1e-7, 2),
upper = rep(Inf, 2), data = y)
gamma <- seq(0.1, 15, length = 100)
beta <- seq(100, 200, length = 100)
# log-likelihood profile function.
log_lik_weibull_profile  <- function(data, beta) {
fix_gamma <- weib.y.mle$par[1]
log_lik_weibull( data, c(fix_gamma, beta) )
}
log_lik_weibull_profile_v <- Vectorize(log_lik_weibull_profile, 'beta')
plot(function(x) - log_lik_weibull_profile_v( data = y , x ) + weib.y.mle$value,
from = 140, to = 175, xlab = expression(beta),
ylab = 'profile relative log likelihood')
conf.level <- 0.95
abline(h = -qchisq(conf.level, 1) / 2, lty = 'dashed', col = 2)
iconf.level <- 0.95
lrt.ci1 <- uniroot( function(x) - log_lik_weibull_profile_v(y, x) +
weib.y.mle$value + qchisq(conf.level, 1) / 2,
c(140,weib.y.mle$par[2]) )$root
lrt.ci1 <- c( lrt.ci1,uniroot( function(x) - log_lik_weibull_profile_v(y,x) +
weib.y.mle$value + qchisq(conf.level, 1) / 2,
c(weib.y.mle$par[2], 175) )$root)
segments( lrt.ci1[1], -qchisq(conf.level, 1) / 2, lrt.ci1[1],
-log_lik_weibull_profile_v(y, lrt.ci1[1]), col = "red", lty = 2  )
segments( lrt.ci1[2], -qchisq(conf.level, 1) / 2, lrt.ci1[2],
-log_lik_weibull_profile_v(y, lrt.ci1[2]), col = "red", lty = 2  )
points(lrt.ci1[1], -qchisq(0.95, 1) / 2, pch = 16, col = 2, cex = 1.5)
points(lrt.ci1[2], -qchisq(0.95, 1) / 2, pch = 16, col = 2, cex = 1.5)
segments( lrt.ci1[1],-5.1, lrt.ci1[2],
-5.1, col = "red", lty = 1, lwd = 2 )
text(157, -4.8, "95% deviance ci", col = 2)
theta_sample <- 2
n <- 10
mu <- 7
sigma2 <- 2
tau2 <- 2
y <- rnorm( n, theta_sample, sqrt(sigma2) )
# Launch Stan model.
data <- list( N = n, y = y, sigma = sqrt(sigma2), mu = mu, tau = sqrt(tau2) )
fit <- stan( file = "normal.stan", data = data, chains = 4, iter = 2000 )
# Extract Stan output.
sim <- extract(fit)
hist( sim$theta, breaks = 25, main = expression(paste('Random draws of ', theta)),
xlab = expression(theta), freq = FALSE )
den <- density( sim$theta, adj = 2 )
line <- lines( den, col = "blue", lwd = 2, lty = 1 )
quantiles <- quantile( sim$theta, probs = c(0.05, 0.95), na.rm = FALSE, names = TRUE )
# Get approximate function from the already computed density, useful to correcly plot quantiles.
dden <- approxfun(den$x, den$y)
# Plot segments on 0.05 and 0.95 quantiles.
segments( x0 = quantiles[1], y0 = 0, y1 = dden(quantiles[1]), col = "red", lty = 2, lwd = 2 )
segments( x0 = quantiles[2], y0 = 0, y1 = dden(quantiles[2]), col = "red", lty = 2, lwd = 2 )
#launch biparametric Stan model
data3 <- list(N = n, y = y, a = -10, b = 10)
fit3 <- stan(file = "biparametric.stan", data = data3, chains = 4, iter = 2000, refresh=-1)
#extract stan output for biparametric model
sim3 <- extract(fit3)
posterior_biv <- as.matrix(fit3)
theta_est <- mean(sim3$theta)
sigma_est <- mean(sim3$sigma)
c(theta_est, sigma_est)
traceplot(fit3, pars=c("theta", "sigma"))
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior_biv,
pars = c("theta","sigma"),
prob = 0.8) + plot_title
install.packages("bayesplot")
install.packages("bayesplot")
install.packages("rstanarm")
library(boot)
library(rstan)
library(ggplot2)
library(bayesplot)
library(rstanarm)
library(boot)
library(rstan)
library(ggplot2)
library(bayesplot)
library(rstanarm)
library(boot)
library(rstan)
library(ggplot2)
library(bayesplot)
score_data <- read.table('student_score.txt', header = TRUE)
psi_fun <- function(data, indices) {
eig <- eigen(cor(data[indices,]))$values  # Goddamn the indices.
return(max(eig) / sum(eig))
}
# psi_fun(score_data)
strap <- boot(data = score_data, statistic = psi_fun, R = 1000); strap
plot(strap)
boot.ci(strap)
# Data.
y <- c(155.9, 200.2, 143.8, 150.1,152.1, 142.2, 147, 146, 146, 170.3, 148, 140, 118, 144, 97)
# log-likelihood function.
log_lik_weibull <- function(data, param) {
-sum(dweibull(data, shape = param[1], scale = param[2], log = TRUE))
}
# ML estimation.
weib.y.mle <- optim(c(1,1), fn = log_lik_weibull, hessian = T,
method = 'L-BFGS-B', lower = rep(1e-7, 2),
upper = rep(Inf, 2), data = y)
gamma <- seq(0.1, 15, length = 100)
beta <- seq(100, 200, length = 100)
# log-likelihood profile function.
log_lik_weibull_profile  <- function(data, beta) {
fix_gamma <- weib.y.mle$par[1]
log_lik_weibull( data, c(fix_gamma, beta) )
}
log_lik_weibull_profile_v <- Vectorize(log_lik_weibull_profile, 'beta')
plot(function(x) - log_lik_weibull_profile_v( data = y , x ) + weib.y.mle$value,
from = 140, to = 175, xlab = expression(beta),
ylab = 'profile relative log likelihood')
conf.level <- 0.95
abline(h = -qchisq(conf.level, 1) / 2, lty = 'dashed', col = 2)
iconf.level <- 0.95
lrt.ci1 <- uniroot( function(x) - log_lik_weibull_profile_v(y, x) +
weib.y.mle$value + qchisq(conf.level, 1) / 2,
c(140,weib.y.mle$par[2]) )$root
lrt.ci1 <- c( lrt.ci1,uniroot( function(x) - log_lik_weibull_profile_v(y,x) +
weib.y.mle$value + qchisq(conf.level, 1) / 2,
c(weib.y.mle$par[2], 175) )$root)
segments( lrt.ci1[1], -qchisq(conf.level, 1) / 2, lrt.ci1[1],
-log_lik_weibull_profile_v(y, lrt.ci1[1]), col = "red", lty = 2  )
segments( lrt.ci1[2], -qchisq(conf.level, 1) / 2, lrt.ci1[2],
-log_lik_weibull_profile_v(y, lrt.ci1[2]), col = "red", lty = 2  )
points(lrt.ci1[1], -qchisq(0.95, 1) / 2, pch = 16, col = 2, cex = 1.5)
points(lrt.ci1[2], -qchisq(0.95, 1) / 2, pch = 16, col = 2, cex = 1.5)
segments( lrt.ci1[1],-5.1, lrt.ci1[2],
-5.1, col = "red", lty = 1, lwd = 2 )
text(157, -4.8, "95% deviance ci", col = 2)
theta_sample <- 2
n <- 10
mu <- 7
sigma2 <- 2
tau2 <- 2
y <- rnorm( n, theta_sample, sqrt(sigma2) )
# Launch Stan model.
data <- list( N = n, y = y, sigma = sqrt(sigma2), mu = mu, tau = sqrt(tau2) )
fit <- stan( file = "normal.stan", data = data, chains = 4, iter = 2000 )
# Extract Stan output.
sim <- extract(fit)
hist( sim$theta, breaks = 25, main = expression(paste('Random draws of ', theta)),
xlab = expression(theta), freq = FALSE )
den <- density( sim$theta, adj = 2 )
line <- lines( den, col = "blue", lwd = 2, lty = 1 )
quantiles <- quantile( sim$theta, probs = c(0.05, 0.95), na.rm = FALSE, names = TRUE )
# Get approximate function from the already computed density, useful to correcly plot quantiles.
dden <- approxfun(den$x, den$y)
# Plot segments on 0.05 and 0.95 quantiles.
segments( x0 = quantiles[1], y0 = 0, y1 = dden(quantiles[1]), col = "red", lty = 2, lwd = 2 )
segments( x0 = quantiles[2], y0 = 0, y1 = dden(quantiles[2]), col = "red", lty = 2, lwd = 2 )
#launch biparametric Stan model
data3 <- list(N = n, y = y, a = -10, b = 10)
fit3 <- stan(file = "biparametric.stan", data = data3, chains = 4, iter = 2000, refresh=-1)
#extract stan output for biparametric model
sim3 <- extract(fit3)
posterior_biv <- as.matrix(fit3)
theta_est <- mean(sim3$theta)
sigma_est <- mean(sim3$sigma)
c(theta_est, sigma_est)
traceplot(fit3, pars=c("theta", "sigma"))
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior_biv,
pars = c("theta","sigma"),
prob = 0.8) + plot_title
library(boot)
library(rstan)
library(ggplot2)
library(bayesplot)
library(rstanarm)
install.packages("rstanarm")
#launch biparametric Stan model
data3 <- list(N = n, y = y, a = -10, b = 10)
fit3 <- stan(file = "biparametric.stan", data = data3, chains = 4, iter = 2000, refresh=-1)
#extract stan output for biparametric model
sim3 <- extract(fit3)
posterior_biv <- as.matrix(fit3)
theta_est <- mean(sim3$theta)
sigma_est <- mean(sim3$sigma)
c(theta_est, sigma_est)
traceplot(fit3, pars=c("theta", "sigma"))
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior_biv,
pars = c("theta","sigma"),
prob = 0.8) + plot_title
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior_biv,
pars = c("theta","sigma"),
prob = 0.8) + plot_title
#launch biparametric Stan model
data3 <- list(N = n, y = y, a = -10, b = 10)
fit3 <- stan(file = "biparametric.stan", data = data3, chains = 4, iter = 2000, refresh=-1)
#extract stan output for biparametric model
sim3 <- extract(fit3)
posterior_biv <- as.matrix(fit3)
theta_est <- mean(sim3$theta)
sigma_est <- mean(sim3$sigma)
c(theta_est, sigma_est)
traceplot(fit3, pars=c("theta", "sigma"))
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior_biv,
pars = c("theta","sigma"),
prob = 0.8) + plot_title
#launch biparametric Stan model
data3 <- list(N = n, y = y, a = -10, b = 10)
fit3 <- stan(file = "biparametric.stan", data = data3, chains = 4, iter = 2000, refresh=-1)
#extract stan output for biparametric model
sim3 <- extract(fit3)
posterior_biv <- as.matrix(fit3)
theta_est <- mean(sim3$theta)
sigma_est <- mean(sim3$sigma)
c(theta_est, sigma_est)
traceplot(fit3, pars=c("theta", "sigma"))
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior_biv,
pars = c("theta","sigma"),
prob = 0.8) + plot_title
update.packages(ask = FALSE, checkBuilt = TRUE)
library(boot)
library(rstan)
library(ggplot2)
library(bayesplot)
score_data <- read.table('student_score.txt', header = TRUE)
psi_fun <- function(data, indices) {
eig <- eigen(cor(data[indices,]))$values  # Goddamn the indices.
return(max(eig) / sum(eig))
}
# psi_fun(score_data)
strap <- boot(data = score_data, statistic = psi_fun, R = 1000); strap
plot(strap)
boot.ci(strap)
# Data.
y <- c(155.9, 200.2, 143.8, 150.1,152.1, 142.2, 147, 146, 146, 170.3, 148, 140, 118, 144, 97)
# log-likelihood function.
log_lik_weibull <- function(data, param) {
-sum(dweibull(data, shape = param[1], scale = param[2], log = TRUE))
}
# ML estimation.
weib.y.mle <- optim(c(1,1), fn = log_lik_weibull, hessian = T,
method = 'L-BFGS-B', lower = rep(1e-7, 2),
upper = rep(Inf, 2), data = y)
gamma <- seq(0.1, 15, length = 100)
beta <- seq(100, 200, length = 100)
# log-likelihood profile function.
log_lik_weibull_profile  <- function(data, beta) {
fix_gamma <- weib.y.mle$par[1]
log_lik_weibull( data, c(fix_gamma, beta) )
}
log_lik_weibull_profile_v <- Vectorize(log_lik_weibull_profile, 'beta')
plot(function(x) - log_lik_weibull_profile_v( data = y , x ) + weib.y.mle$value,
from = 140, to = 175, xlab = expression(beta),
ylab = 'profile relative log likelihood')
conf.level <- 0.95
abline(h = -qchisq(conf.level, 1) / 2, lty = 'dashed', col = 2)
iconf.level <- 0.95
lrt.ci1 <- uniroot( function(x) - log_lik_weibull_profile_v(y, x) +
weib.y.mle$value + qchisq(conf.level, 1) / 2,
c(140,weib.y.mle$par[2]) )$root
lrt.ci1 <- c( lrt.ci1,uniroot( function(x) - log_lik_weibull_profile_v(y,x) +
weib.y.mle$value + qchisq(conf.level, 1) / 2,
c(weib.y.mle$par[2], 175) )$root)
segments( lrt.ci1[1], -qchisq(conf.level, 1) / 2, lrt.ci1[1],
-log_lik_weibull_profile_v(y, lrt.ci1[1]), col = "red", lty = 2  )
segments( lrt.ci1[2], -qchisq(conf.level, 1) / 2, lrt.ci1[2],
-log_lik_weibull_profile_v(y, lrt.ci1[2]), col = "red", lty = 2  )
points(lrt.ci1[1], -qchisq(0.95, 1) / 2, pch = 16, col = 2, cex = 1.5)
points(lrt.ci1[2], -qchisq(0.95, 1) / 2, pch = 16, col = 2, cex = 1.5)
segments( lrt.ci1[1],-5.1, lrt.ci1[2],
-5.1, col = "red", lty = 1, lwd = 2 )
text(157, -4.8, "95% deviance ci", col = 2)
theta_sample <- 2
n <- 10
mu <- 7
sigma2 <- 2
tau2 <- 2
y <- rnorm( n, theta_sample, sqrt(sigma2) )
# Launch Stan model.
data <- list( N = n, y = y, sigma = sqrt(sigma2), mu = mu, tau = sqrt(tau2) )
fit <- stan( file = "normal.stan", data = data, chains = 4, iter = 2000 )
# Extract Stan output.
sim <- extract(fit)
hist( sim$theta, breaks = 25, main = expression(paste('Random draws of ', theta)),
xlab = expression(theta), freq = FALSE )
den <- density( sim$theta, adj = 2 )
line <- lines( den, col = "blue", lwd = 2, lty = 1 )
quantiles <- quantile( sim$theta, probs = c(0.05, 0.95), na.rm = FALSE, names = TRUE )
# Get approximate function from the already computed density, useful to correcly plot quantiles.
dden <- approxfun(den$x, den$y)
# Plot segments on 0.05 and 0.95 quantiles.
segments( x0 = quantiles[1], y0 = 0, y1 = dden(quantiles[1]), col = "red", lty = 2, lwd = 2 )
segments( x0 = quantiles[2], y0 = 0, y1 = dden(quantiles[2]), col = "red", lty = 2, lwd = 2 )
#launch biparametric Stan model
data3 <- list(N = n, y = y, a = -10, b = 10)
fit3 <- stan(file = "biparametric.stan", data = data3, chains = 4, iter = 2000, refresh=-1)
#extract stan output for biparametric model
sim3 <- extract(fit3)
posterior_biv <- as.matrix(fit3)
theta_est <- mean(sim3$theta)
sigma_est <- mean(sim3$sigma)
c(theta_est, sigma_est)
traceplot(fit3, pars=c("theta", "sigma"))
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior_biv,
pars = c("theta","sigma"),
prob = 0.8) + plot_title
#launch biparametric Stan model
data3 <- list(N = n, y = y, a = -10, b = 10)
fit3 <- stan(file = "biparametric.stan", data = data3, chains = 4, iter = 2000, refresh = -1)
#extract stan output for biparametric model
sim3 <- extract(fit3)
posterior_biv <- as.matrix(fit3)
theta_est <- mean(sim3$theta)
sigma_est <- mean(sim3$sigma)
c(theta_est, sigma_est)
traceplot(fit3, pars = c("theta", "sigma"))
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior_biv,
pars = c("theta","sigma"),
prob = 0.8) + plot_title
#launch biparametric Stan model
data3 <- list(N = n, y = y, a = -10, b = 10)
fit3 <- stan(file = "biparametric.stan", data = data3, chains = 4, iter = 2000, refresh = -1)
#extract stan output for biparametric model
sim3 <- extract(fit3)
posterior_biv <- as.matrix(fit3)
theta_est <- mean(sim3$theta)
sigma_est <- mean(sim3$sigma)
c(theta_est, sigma_est)
traceplot(fit3, pars = c("theta", "sigma"))
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior_biv,
pars = c("theta","sigma"),
prob = 0.8) + plot_title
plot_title <- ggtitle("Posterior distributions",
"with medians and 80% intervals")
mcmc_areas(posterior_biv,
pars = c("theta","sigma"),
prob = 0.8) + plot_title
# Extract Stan output.
sim <- extract(fit)
mean(sim$theta)
hist( sim$theta, breaks = 25, main = expression(paste('Random draws of ', theta)),
xlab = expression(theta), freq = FALSE )
den <- density( sim$theta, adj = 2 )
line <- lines( den, col = "blue", lwd = 2, lty = 1 )
quantiles <- quantile( sim$theta, probs = c(0.05, 0.95), na.rm = FALSE, names = TRUE )
# Get approximate function from the already computed density, useful to correcly plot quantiles.
dden <- approxfun(den$x, den$y)
# Plot segments on 0.05 and 0.95 quantiles.
segments( x0 = quantiles[1], y0 = 0, y1 = dden(quantiles[1]), col = "red", lty = 2, lwd = 2 )
segments( x0 = quantiles[2], y0 = 0, y1 = dden(quantiles[2]), col = "red", lty = 2, lwd = 2 )
# Extract Stan output.
sim <- extract(fit)
mean(sim$theta)
hist( sim$theta, breaks = 25, main = expression(paste('Random draws of ', theta)),
xlab = expression(theta), freq = FALSE )
den <- density( sim$theta, adj = 2 )
line <- lines( den, col = "blue", lwd = 2, lty = 1 )
quantiles <- quantile( sim$theta, probs = c(0.05, 0.95), na.rm = FALSE, names = TRUE )
# Get approximate function from the already computed density, useful to correcly plot quantiles.
dden <- approxfun(den$x, den$y)
# Plot segments on 0.05 and 0.95 quantiles.
segments( x0 = quantiles[1], y0 = 0, y1 = dden(quantiles[1]), col = "red", lty = 2, lwd = 2 )
segments( x0 = quantiles[2], y0 = 0, y1 = dden(quantiles[2]), col = "red", lty = 2, lwd = 2 )
#launch biparametric Stan model
data3 <- list(N = n, y = y, a = -10, b = 10)
fit3 <- stan(file = "biparametric.stan", data = data3, chains = 4, iter = 2000, refresh = -1)
#extract stan output for biparametric model
sim3 <- extract(fit3)
posterior_biv <- as.matrix(fit3)
theta_est <- mean(sim3$theta)
sigma_est <- mean(sim3$sigma)
c(mean(sim3$theta), mean(sim3$sigma))
traceplot(fit3, pars = c("theta", "sigma"))
#launch biparametric Stan model
data3 <- list(N = n, y = y, a = -10, b = 10)
fit3 <- stan(file = "biparametric.stan", data = data3, chains = 4, iter = 2000, refresh = -1)
#extract stan output for biparametric model
sim3 <- extract(fit3)
posterior_biv <- as.matrix(fit3)
c(mean(sim3$theta), mean(sim3$sigma))
traceplot(fit3, pars = c("theta", "sigma"))
#launch biparametric Stan model
data3 <- list(N = n, y = y, a = -10, b = 10)
fit3 <- stan(file = "biparametric.stan", data = data3, chains = 4, iter = 2000, refresh = -1)
#extract stan output for biparametric model
sim3 <- extract(fit3)
posterior_biv <- as.matrix(fit3)
c(mean(sim3$theta), mean(sim3$sigma))
traceplot(fit3, pars = c("theta", "sigma"))
setwd("~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data")
source('~/.active-rstudio-document', echo=TRUE)
View(data)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
View(data)
View(data)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
View(data)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
View(data)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
View(data)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
View(omp)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
View(mpi)
View(omp)
?write.table
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
write.table(mpi, "processed_mpi.dat", sep="\t", row.names = F, col.names = F)
source('~/DSSC/first_year/second_semester/PP/DSSC_github/Assignments_Indri/Assignment_2/Ex_3/data/data.R', echo=TRUE)
